"""
given a string, find the length of the longest substring w/o repeats

examples:
        "abcabcbb" -> "abc": 3
        "bbbbbbb" -> "b": 1
        "pwwkew" -> "wke" :3
"""
    

class Solution:
        def lengthOfLongestSubstring(self, s):

                longest = start = current = 0
                check = dict()
                
                for i in range(len(s)):
                        
                        if s[i] in check.keys():
                                start = check[s[i]]+1 if check[s[i]] + 1 > start else start
                                
                        current = i - start + 1
                        check[s[i]] = i

                        longest = max(longest, current)
                return longest

test1 = ("abcabcbb", 3)
test2 = ("bbbbbb" ,1)
test3 = ("pwwkew" ,3)
test4 = ("dvdf" ,3)
test5 = ("ckilbkd",5)
test6 = ("tmmzuxt" ,5)

testSol = [test1, test2, test3, test4, test5, test6]
c = solution()

for tests, sol in testSol:
        try :
                val = c.lengthOfLongestSubstring(tests)
                assert(val == sol)
                print(tests, sol)
        except:
                print("**Failed***", tests, sol, val)
        
